/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,20],$V2=[1,14],$V3=[1,16],$V4=[1,17],$V5=[1,37],$V6=[1,24],$V7=[1,35],$V8=[1,36],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,15],$Ve=[1,19],$Vf=[1,18],$Vg=[5,17,33,40,41,42,45,55,57,73,74,75,76,79,80,83,98,106],$Vh=[1,48],$Vi=[1,55],$Vj=[2,81],$Vk=[1,57],$Vl=[37,39],$Vm=[1,64],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[34,37,39,43,62,63,64],$Vr=[1,66],$Vs=[17,34,37,39,43,55,62,63,64,73,74,75,76,79,80],$Vt=[1,71],$Vu=[1,81],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[34,37],$Vz=[2,14],$VA=[1,102],$VB=[1,103],$VC=[1,104],$VD=[1,105],$VE=[1,106],$VF=[1,107],$VG=[1,108],$VH=[1,109],$VI=[17,55,73,74,75,76,79,80],$VJ=[1,128],$VK=[37,39,43],$VL=[43,44],$VM=[1,152],$VN=[1,151],$VO=[34,37,43,44,51],$VP=[34,37,43,44,51,62,78,95,96,97],$VQ=[1,175],$VR=[1,174],$VS=[1,176],$VT=[1,177],$VU=[1,178],$VV=[34,37,51,62,78,95,96,97],$VW=[1,187],$VX=[1,185],$VY=[1,186],$VZ=[17,19,21,23,25,27,29,33],$V_=[17,19,21,25,27,29,33],$V$=[25,40,104,105],$V01=[1,210],$V11=[17,40];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Stylesheet":3,"Rule-List":4,"EOF":5,"Qualified-Rule":6,"Comment":7,"Media-Query-Rule":8,"Import-Rule":9,"At-Rule":10,"Keyframes-Rule":11,"Mixin-Rule":12,"Root-Rule":13,"Declaration-Rule":14,"Declaration-Set-Rule":15,"Ident":16,"IDENT":17,"Number":18,"NUMBER":19,"Dimension":20,"DIMENSION":21,"Unicode-Range":22,"UNICODE-RANGE":23,"Percentage":24,"PERCENTAGE":25,"String":26,"STRING":27,"Color":28,"COLOR":29,"Anb":30,"ANB":31,"Function":32,"FUNCTION":33,")":34,"Function-Params":35,"Function-Param":36,",":37,"Rule-Block":38,"{":39,"}":40,"COMMENT":41,"IMPORT":42,"WSS":43,";":44,"REQUIRE":45,":":46,"Property-List":47,"Property-Item":48,"Property":49,"Property-Operator":50,"/":51,"Mix-Params":52,"Mix-Param":53,"Rest-Param":54,".":55,"Root":56,"ROOT":57,"Selector-List":58,"Complex-Selector":59,"Compound-Selector":60,"Combinator":61,">":62,"~":63,"+":64,"Simple-Selector":65,"Type-Selector":66,"Parent-Selector":67,"Universal-Selector":68,"Class-Selector":69,"ID-Selector":70,"Attrib-Selector":71,"Pseudo-Selector":72,"&":73,"*":74,"HASH":75,"[":76,"]":77,"=":78,"PSEUDO-CLASS":79,"PSEUDO-ELEMENT":80,"Function-Pseudo":81,"Pseudo-Value":82,"MEDIA":83,"Media-Query-List":84,"Media-Query":85,"Media-Condition":86,"Media-Type":87,"NOT":88,"ONLY":89,"AND":90,"(":91,"Media-Operator":92,"Media-Condition-Value":93,"Media-Condition-Item":94,"<":95,">=":96,"<=":97,"KEYFRAMES":98,"Keyframes-Block":99,"Keyframes-List":100,"Keyframes":101,"Keyframes-Selector":102,"Keyframes-Set":103,"FROM":104,"TO":105,"AT-KEYWORD":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"IDENT",19:"NUMBER",21:"DIMENSION",23:"UNICODE-RANGE",25:"PERCENTAGE",27:"STRING",29:"COLOR",31:"ANB",33:"FUNCTION",34:")",37:",",39:"{",40:"}",41:"COMMENT",42:"IMPORT",43:"WSS",44:";",45:"REQUIRE",46:":",51:"/",55:".",57:"ROOT",62:">",63:"~",64:"+",73:"&",74:"*",75:"HASH",76:"[",77:"]",78:"=",79:"PSEUDO-CLASS",80:"PSEUDO-ELEMENT",83:"MEDIA",88:"NOT",89:"ONLY",90:"AND",91:"(",95:"<",96:">=",97:"<=",98:"KEYFRAMES",104:"FROM",105:"TO",106:"AT-KEYWORD"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[16,1],[18,1],[20,1],[22,1],[24,1],[26,1],[28,1],[30,1],[32,2],[32,3],[35,1],[35,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[38,2],[38,3],[7,1],[9,4],[9,4],[14,4],[47,1],[47,3],[48,1],[48,3],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[50,1],[50,1],[12,3],[12,4],[52,1],[52,3],[53,1],[53,1],[54,4],[56,1],[13,2],[15,2],[58,1],[58,3],[59,1],[59,3],[61,1],[61,1],[61,1],[61,1],[60,1],[60,2],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[66,1],[67,1],[68,1],[69,2],[70,1],[71,3],[71,5],[71,5],[72,2],[72,2],[72,2],[72,2],[81,2],[81,3],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[8,4],[84,1],[84,3],[85,1],[85,1],[85,3],[85,3],[85,5],[87,1],[86,3],[86,5],[86,5],[86,7],[93,1],[93,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[92,1],[92,1],[92,1],[92,1],[92,1],[11,4],[99,2],[99,3],[100,1],[100,2],[101,4],[102,1],[102,1],[102,1],[103,1],[103,2],[10,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = {
        type: 'stylesheet',
        rule: $$[$0-1]
      };

      return this.$;
    
break;
case 2:

      this.$ = {
        type: 'stylesheet'
      };

      return this.$;
    
break;
case 3: case 24: case 56: case 64: case 105: case 133: case 139:
this.$ = [$$[$0]];
break;
case 4: case 134: case 140:

      this.$ = $$[$0-1];
      this.$.push($$[$0]);
    
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 26: case 27: case 28: case 29: case 30: case 33: case 44: case 45: case 46: case 47: case 48: case 51: case 58: case 59: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 119: case 120: case 121: case 122: case 123: case 124: case 136: case 137: case 138:
this.$ = $$[$0];
break;
case 14:

      this.$ = {
        type: 'ident',
        val: $$[$0]
      };
    
break;
case 15: case 16: case 17: case 18: case 20: case 21: case 52: case 53: case 61: case 68: case 69: case 70: case 71: case 125: case 126: case 127: case 128: case 129:

      this.$ = {
        type: 'literal',
        val: $$[$0]
      };
    
break;
case 19:

      this.$ = {
        type: 'string',
        val: $$[$0]
      };
    
break;
case 22:

      this.$ = {
        type: 'function',
        name: $$[$0-1],
        params: []
      };
    
break;
case 23:

      this.$ = {
        type: 'function',
        name: $$[$0-2],
        params: $$[$0-1]
      }
    
break;
case 25: case 41: case 57: case 65: case 106:

      this.$ = $$[$0-2];
      this.$.push($$[$0]);
    
break;
case 34: case 131:
this.$ = null;
break;
case 35: case 132:
this.$ = $$[$0-1];
break;
case 36:

      this.$ = {
        type: 'comment',
        val: $$[$0]
      };
    
break;
case 37:

      this.$ = {
        type: 'import',
        once: true,
        id: $$[$0-1]
      };
    
break;
case 38:

      this.$ = {
        type: 'import',
        id: $$[$0-1]
      };
    
break;
case 39:

      this.$ = {
        type: 'declaration',
        name: $$[$0-3],
        list: $$[$0-1]
      };
    
break;
case 40:

      this.$ = [$$[$0]];
    
break;
case 42: case 117:

      this.$ = {
        type: 'property_item',
        item: [$$[$0]]
      };
    
break;
case 43: case 118:

      this.$ = $$[$0-2];
      this.$.item.push($$[$0-1]);
      this.$.item.push($$[$0]);
    
break;
case 54:

      this.$ = {
        type: 'mixin',
        name: $$[$0-2],
        params: [],
        nodes: $$[$01]
      };
    
break;
case 55:

      this.$ = {
        type: 'mixin',
        name: $$[$0-3],
        params: $$[$0-2],
        nodes: $$[$0]
      };
    
break;
case 60:

      this.$ = {
        type: 'reset',
        name: $$[$0-3]
      };
    
break;
case 62:

      this.$ = {
        type: 'root',
        nodes: $$[$0]
      };
    
break;
case 63:

      this.$ = {
        type: 'declaration_set',
        selector: $$[$0-1],
        nodes: $$[$0]
      };
    
break;
case 66:

      this.$ = {
        type: 'complex_selector',
        list: [$$[$0]]
      };
    
break;
case 67:

      this.$ = $$[$0-2];
      this.$.list.push($$[$0-1]);
      this.$.list.push($$[$0]);
    
break;
case 72:

      this.$ = {
        type: 'compound_selector',
        list: [$$[$0]]
      };
    
break;
case 73:

      this.$ = $$[$0-1];
      this.$.list.push($$[$0]);
    
break;
case 81:

      this.$ = {
        type: 'type_selector',
        val: $$[$0]
      };
    
break;
case 82:

      this.$ = {
        type: 'parent_selector',
        val: $$[$0]
      };
    
break;
case 83:

      this.$ = {
        type: 'universal_selector',
        val: $$[$0]
      };
    
break;
case 84:

      this.$ = {
        type: 'class_selector',
        val: $$[$0]
      };
    
break;
case 85:

      this.$ = {
        type: 'id_selector',
        val: $$[$0]
      };
    
break;
case 86:

      this.$ = {
        type: 'attrib_selector',
        name: $$[$0-1]
      };
    
break;
case 87: case 88:

      this.$ = {
        type: 'attrib_selector',
        name: $$[$0-3],
        val: $$[$0-1]
      };
    
break;
case 89:

      this.$ = {
        type: 'pseudo_class_selector',
        name: $$[$0]
      };
    
break;
case 90:

      this.$ = {
        type: 'pseudo_element_selector',
        name: $$[$0]
      };
    
break;
case 91:

      this.$ = {
        type: 'pseudo_class_selector',
        func: $$[$0]
      };
    
break;
case 92:

      this.$ = {
        type: 'pseudo_element_selector',
        func: $$[$0]
      };
    
break;
case 93:

      this.$ = {
        type: 'function_pseudo',
        name: $$[$0-1]
      };
    
break;
case 94:

      this.$ = {
        type: 'function_pseudo',
        name: $$[$0-2],
        val: $$[$0-1]
      };
    
break;
case 104:

      this.$ = {
        type: 'media',
        query: $$[$0-1],
        rule: $$[$0]
      };
    
break;
case 107: case 108:

      this.$ = {
        type: 'media_query',
        val: [$$[$0]]
      };
    
break;
case 109:

      this.$ = {
        type: 'media_query',
        val: [{type:'not', val:$$[$0-2]},$$[$0]]
      };
    
break;
case 110:

      this.$ = {
        type: 'media_query',
        val: [{type:'only', val:$$[$0-2]},$$[$0]]
      };
    
break;
case 111:

      this.$ = $$[$0-4];
      this.$.val.push({type:'and', val:$$[$0-2]});
      this.$.val.push($$[$0]);
    
break;
case 112:

      this.$ = {
        type: 'media_type',
        val: $$[$0]
      };
    
break;
case 113:

      this.$ = {
        type: 'media_condition',
        name: $$[$0-1]
      }
    
break;
case 114:

      this.$ = {
        type: 'media_condition',
        name: $$[$0-3],
        val: $$[$0-1]
      };
    
break;
case 115:

      this.$ = {
        type: 'media_condition_range',
        val: [{type:'literal', val:$$[$0-3]}, $$[$0-2], $$[$0-1]]
      };
    
break;
case 116:

      this.$ = {
        type: 'media_condition_range',
        val: [$$[$0-5],$$[$0-4],{type:'literal', val:$$[$0-3]}, $$[$0-2], $$[$0-1]]
      };
    
break;
case 130:

      this.$ = {
        type: 'keyframes',
        name: $$[$0-1],
        rule: $$[$0]
      };
    
break;
case 135:

      this.$ = {
        type: 'keyframe',
        selector: $$[$0-3],
        rule: $$[$0-1]
      };
    
break;
case 141:

      this.$ = {
        type: 'at_rule',
        name: $$[$0-1],
        rule: $$[$0]
      };
    
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,17:$V0,33:$V1,41:$V2,42:$V3,45:$V4,55:$V5,56:21,57:$V6,58:23,59:25,60:26,65:27,66:28,67:29,68:30,69:31,70:32,71:33,72:34,73:$V7,74:$V8,75:$V9,76:$Va,79:$Vb,80:$Vc,83:$Vd,98:$Ve,106:$Vf},{1:[3]},{5:[1,42],6:43,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,17:$V0,33:$V1,41:$V2,42:$V3,45:$V4,55:$V5,56:21,57:$V6,58:23,59:25,60:26,65:27,66:28,67:29,68:30,69:31,70:32,71:33,72:34,73:$V7,74:$V8,75:$V9,76:$Va,79:$Vb,80:$Vc,83:$Vd,98:$Ve,106:$Vf},{1:[2,2]},o($Vg,[2,3]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,36]),{43:[1,44]},{43:[1,45]},{43:[1,46]},{38:47,39:$Vh},{43:[1,49]},{16:53,17:$Vi,34:[1,50],52:51,53:52,54:54},{38:56,39:$Vh},o([17,37,39,43,55,62,63,64,73,74,75,76,79,80],$Vj,{46:$Vk}),{37:[1,59],38:58,39:$Vh},o([34,39],[2,61]),o($Vl,[2,64],{61:60,43:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($Vq,[2,66],{66:28,67:29,68:30,69:31,70:32,71:33,72:34,65:65,17:$Vr,55:$V5,73:$V7,74:$V8,75:$V9,76:$Va,79:$Vb,80:$Vc}),o($Vs,[2,72]),o($Vs,[2,74]),o($Vs,[2,75]),o($Vs,[2,76]),o($Vs,[2,77]),o($Vs,[2,78]),o($Vs,[2,79]),o($Vs,[2,80]),o($Vs,[2,82]),o($Vs,[2,83]),{17:[1,67]},o($Vs,[2,85]),{17:[1,68]},{17:[1,69],33:$Vt,81:70},{17:[1,72],33:$Vt,81:73},{1:[2,1]},o($Vg,[2,4]),{17:$Vu,84:74,85:75,86:76,87:77,88:$Vv,89:$Vw,91:$Vx},{27:[1,82]},{27:[1,83]},o($Vg,[2,141]),{4:85,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,17:$V0,33:$V1,40:[1,84],41:$V2,42:$V3,45:$V4,55:$V5,56:21,57:$V6,58:23,59:25,60:26,65:27,66:28,67:29,68:30,69:31,70:32,71:33,72:34,73:$V7,74:$V8,75:$V9,76:$Va,79:$Vb,80:$Vc,83:$Vd,98:$Ve,106:$Vf},{17:[1,86]},{38:87,39:$Vh},{34:[1,88],37:[1,89]},o($Vy,[2,56]),o($Vy,[2,58]),o($Vy,[2,59]),o($Vy,$Vz,{55:[1,90]}),o($Vg,[2,62]),{16:94,17:$VA,18:95,19:$VB,20:96,21:$VC,22:97,23:$VD,24:98,25:$VE,26:99,27:$VF,28:100,29:$VG,32:101,33:$VH,47:91,48:92,49:93},o($Vg,[2,63]),{17:$Vr,55:$V5,59:110,60:26,65:27,66:28,67:29,68:30,69:31,70:32,71:33,72:34,73:$V7,74:$V8,75:$V9,76:$Va,79:$Vb,80:$Vc},{17:$Vr,55:$V5,60:111,65:27,66:28,67:29,68:30,69:31,70:32,71:33,72:34,73:$V7,74:$V8,75:$V9,76:$Va,79:$Vb,80:$Vc},o($VI,[2,68]),o($VI,[2,69]),o($VI,[2,70]),o($VI,[2,71]),o($Vs,[2,73]),o($Vs,$Vj),o($Vs,[2,84]),{77:[1,112],78:[1,113]},o($Vs,[2,89]),o($Vs,[2,91]),{17:$Vr,18:118,19:$VB,20:119,21:$VC,22:120,23:$VD,24:121,25:$VE,26:122,27:$VF,28:123,29:$VG,30:124,31:[1,125],34:[1,114],55:$V5,56:117,57:$V6,59:116,60:26,65:27,66:28,67:29,68:30,69:31,70:32,71:33,72:34,73:$V7,74:$V8,75:$V9,76:$Va,79:$Vb,80:$Vc,82:115},o($Vs,[2,90]),o($Vs,[2,92]),{37:[1,127],38:126,39:$Vh},o($Vl,[2,105],{43:$VJ}),o($VK,[2,107]),o($VK,[2,108]),{43:[1,129]},{43:[1,130]},{17:[1,131],18:134,19:$VB,20:135,21:$VC,24:136,25:$VE,26:137,27:$VF,28:138,29:$VG,32:139,33:$VH,93:132,94:133},o($VK,[2,112]),{44:[1,140]},{44:[1,141]},o($Vg,[2,34]),{6:43,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,17:$V0,33:$V1,40:[1,142],41:$V2,42:$V3,45:$V4,55:$V5,56:21,57:$V6,58:23,59:25,60:26,65:27,66:28,67:29,68:30,69:31,70:32,71:33,72:34,73:$V7,74:$V8,75:$V9,76:$Va,79:$Vb,80:$Vc,83:$Vd,98:$Ve,106:$Vf},{39:[1,144],99:143},o($Vg,[2,54]),{38:145,39:$Vh},{16:53,17:$Vi,53:146,54:54},{55:[1,147]},{43:[1,149],44:[1,148]},o($VL,[2,40],{50:150,37:$VM,51:$VN}),o($VO,[2,42]),o($VO,[2,44]),o($VO,[2,45]),o($VO,[2,46]),o($VO,[2,47]),o($VO,[2,48]),o($VO,[2,49]),o($VO,[2,50]),o($VO,[2,51]),o([34,37,43,44,51,77],$Vz),o($VP,[2,15]),o($VP,[2,16]),o($VO,[2,17]),o($VP,[2,18]),o([34,37,43,44,51,62,77,78,95,96,97],[2,19]),o($VP,[2,20]),{16:156,17:$VA,18:157,19:$VB,20:158,21:$VC,22:159,23:$VD,24:160,25:$VE,26:161,27:$VF,28:162,29:$VG,32:163,33:$VH,34:[1,153],35:154,36:155},o($Vl,[2,65],{61:60,43:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($Vq,[2,67],{66:28,67:29,68:30,69:31,70:32,71:33,72:34,65:65,17:$Vr,55:$V5,73:$V7,74:$V8,75:$V9,76:$Va,79:$Vb,80:$Vc}),o($Vs,[2,86]),{16:164,17:$VA,26:165,27:$VF},o($Vs,[2,93]),{34:[1,166]},{34:[2,95],43:$Vm,61:60,62:$Vn,63:$Vo,64:$Vp},{34:[2,96]},{34:[2,97]},{34:[2,98]},{34:[2,99]},{34:[2,100]},{34:[2,101]},{34:[2,102]},{34:[2,103]},{34:[2,21]},o($Vg,[2,104]),{17:$Vu,85:167,86:76,87:77,88:$Vv,89:$Vw,91:$Vx},{90:[1,168]},{17:$Vu,87:169},{17:$Vu,87:170},{34:[1,171],46:[1,172],62:$VQ,78:$VR,92:173,95:$VS,96:$VT,97:$VU},{37:$VM,50:180,51:$VN,62:$VQ,78:$VR,92:179,95:$VS,96:$VT,97:$VU},o($VV,[2,117]),o($VV,[2,119]),o($VV,[2,120]),o($VV,[2,121]),o($VV,[2,122]),o($VV,[2,123]),o($VV,[2,124]),o($Vg,[2,37]),o($Vg,[2,38]),o($Vg,[2,35]),o($Vg,[2,130]),{25:$VW,40:[1,181],100:182,101:183,102:184,104:$VX,105:$VY},o($Vg,[2,55]),o($Vy,[2,57]),{55:[1,188]},o($Vg,[2,39]),{16:94,17:$VA,18:95,19:$VB,20:96,21:$VC,22:97,23:$VD,24:98,25:$VE,26:99,27:$VF,28:100,29:$VG,32:101,33:$VH,48:189,49:93},{16:94,17:$VA,18:95,19:$VB,20:96,21:$VC,22:97,23:$VD,24:98,25:$VE,26:99,27:$VF,28:100,29:$VG,32:101,33:$VH,49:190},o($VZ,[2,52]),o($VZ,[2,53]),o($VP,[2,22]),{34:[1,191],37:[1,192]},o($Vy,[2,24]),o($Vy,[2,26]),o($Vy,[2,27]),o($Vy,[2,28]),o($Vy,[2,29]),o($Vy,[2,30]),o($Vy,[2,31]),o($Vy,[2,32]),o($Vy,[2,33]),{77:[1,193]},{77:[1,194]},o($Vs,[2,94]),o($Vl,[2,106],{43:$VJ}),{43:[1,195]},o($VK,[2,109]),o($VK,[2,110]),o($VK,[2,113]),{16:94,17:$VA,18:95,19:$VB,20:96,21:$VC,22:97,23:$VD,24:98,25:$VE,26:99,27:$VF,28:100,29:$VG,32:101,33:$VH,48:196,49:93},{18:134,19:$VB,20:135,21:$VC,24:136,25:$VE,26:137,27:$VF,28:138,29:$VG,32:139,33:$VH,93:197,94:133},o($V_,[2,125]),o($V_,[2,126]),o($V_,[2,127]),o($V_,[2,128]),o($V_,[2,129]),{17:[1,198]},{18:134,19:$VB,20:135,21:$VC,24:136,25:$VE,26:137,27:$VF,28:138,29:$VG,32:139,33:$VH,94:199},o($Vg,[2,131]),{25:$VW,40:[1,200],101:201,102:184,104:$VX,105:$VY},o($V$,[2,133]),{39:[1,202]},{39:[2,136]},{39:[2,137]},{39:[2,138]},o($Vy,[2,60]),o($VL,[2,41],{50:150,37:$VM,51:$VN}),o($VO,[2,43]),o($VP,[2,23]),{16:156,17:$VA,18:157,19:$VB,20:158,21:$VC,22:159,23:$VD,24:160,25:$VE,26:161,27:$VF,28:162,29:$VG,32:163,33:$VH,36:203},o($Vs,[2,87]),o($Vs,[2,88]),{86:204,91:$Vx},{34:[1,205],37:$VM,50:150,51:$VN},{34:[1,206],37:$VM,50:180,51:$VN},{62:$VQ,78:$VR,92:207,95:$VS,96:$VT,97:$VU},o($VV,[2,118]),o($Vg,[2,132]),o($V$,[2,134]),{14:209,17:$V01,103:208},o($Vy,[2,25]),o($VK,[2,111]),o($VK,[2,114]),o($VK,[2,115]),{18:134,19:$VB,20:135,21:$VC,24:136,25:$VE,26:137,27:$VF,28:138,29:$VG,32:139,33:$VH,93:211,94:133},{14:213,17:$V01,40:[1,212]},o($V11,[2,139]),{46:$Vk},{34:[1,214],37:$VM,50:180,51:$VN},o($V$,[2,135]),o($V11,[2,140]),o($VK,[2,116])],
defaultActions: {3:[2,2],42:[2,1],117:[2,96],118:[2,97],119:[2,98],120:[2,99],121:[2,100],122:[2,101],123:[2,102],124:[2,103],125:[2,21],185:[2,136],186:[2,137],187:[2,138]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    yy_.yytext = yy_.yytext.substring(2);
    return 41;
  
break;
case 1:
    yy_.yytext = yy_.yytext.substring(2, (yy_.yytext.length - 2));
    return 41;
  
break;
case 2:
    /* ignore newline */
  
break;
case 3:
    return 42;
  
break;
case 4:
    return 45;
  
break;
case 5:
    return 98;
  
break;
case 6:
    return 83;
  
break;
case 7:
    return 57;
  
break;
case 8:
    return 106;
  
break;
case 9:
    return 29;
  
break;
case 10:
    return 75;
  
break;
case 11:
    yy_.yytext = yy_.yytext.trim().substring(0, (yy_.yytext.length - 1));
    return 33;
  
break;
case 12:
    return 89;
  
break;
case 13:
    return 88;
  
break;
case 14:
    return 90;
  
break;
case 15:
    return 104;
  
break;
case 16:
    return 105;
  
break;
case 17:
    return 31;
  
break;
case 18:
    yy_.yytext = yy_.yytext.substring(1, (yy_.yytext.length - 1));
    return 27;
  
break;
case 19:
    return 25;
  
break;
case 20:
    return 21;
  
break;
case 21:
    return 19;
  
break;
case 22:
    return 23;
  
break;
case 23:
    return 17;
  
break;
case 24:
    yy_.yytext = yy_.yytext.trim();
    return 64;
  
break;
case 25:
    yy_.yytext = yy_.yytext.trim();
    return 78;
  
break;
case 26:
    yy_.yytext = yy_.yytext.trim();
    return 62;
  
break;
case 27:
    yy_.yytext = yy_.yytext.trim();
    return 95;
  
break;
case 28:
    yy_.yytext = yy_.yytext.trim();
    return 96;
  
break;
case 29:
    yy_.yytext = yy_.yytext.trim();
    return 97;
  
break;
case 30:
    yy_.yytext = yy_.yytext.trim();
    return '~=';
  
break;
case 31:
    yy_.yytext = yy_.yytext.trim();
    return '|=';
  
break;
case 32:
    yy_.yytext = yy_.yytext.trim();
    return '^=';
  
break;
case 33:
    yy_.yytext = yy_.yytext.trim();
    return "$=";
  
break;
case 34:
    yy_.yytext = yy_.yytext.trim();
    return '*=';
  
break;
case 35:
    yy_.yytext = yy_.yytext.trim();
    return '||';
  
break;
case 36: return yy_.yytext; 
break;
case 37:
    this.begin('STATE-COLONS');
  
break;
case 38:
    this.popState();
    return 80;
  
break;
case 39:
    this.popState();
    return 46;
  
break;
case 40:
    this.popState();
    this.unput(yy_.yytext);

    return 46;
  
break;
case 41:
    this.popState();
    this.unput(yy_.yytext);

    return 46;
  
break;
case 42:
    this.popState();
    this.unput(yy_.yytext);

    return 79;
  
break;
case 43:
    this.popState();
    this.unput(yy_.yytext);

    return 79;
  
break;
case 44:
    yy_.yytext = yy_.yytext.trim();
    return 44;
  
break;
case 45:
    yy_.yytext = yy_.yytext.trim();
    return 37;
  
break;
case 46:
    yy_.yytext = yy_.yytext.trim();
    return 76;
  
break;
case 47:
    yy_.yytext = yy_.yytext.trim();
    return 77;
  
break;
case 48:
    yy_.yytext = yy_.yytext.trim();
    return 91;
  
break;
case 49:
    yy_.yytext = yy_.yytext.trim();
    return 34;
  
break;
case 50:
    yy_.yytext = yy_.yytext.trim();
    return 39;
  
break;
case 51:
    yy_.yytext = yy_.yytext.trim();
    return 40;
  
break;
case 52:
    return 43;
  
break;
case 53: return yy_.yytext; 
break;
case 54: return 5; 
break;
}
},
rules: [/^(?:(\/\/[^\n\r\f]*))/,/^(?:(\/\*[^*]*\*+([^\/*][^*]*\*+)*\/))/,/^(?:((( )|\t)*)(\n|\r\n|\r|\f)((( )|\t)*))/,/^(?:@import\b)/,/^(?:@require\b)/,/^(?:@keyframes\b)/,/^(?:@media\b)/,/^(?::root\b)/,/^(?:@(([_a-zA-Z-]|([^\0-\177])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))([_a-zA-Z0-9-]|([^\0-\177])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))*))/,/^(?:(#([0-9a-fA-F]){8}|#([0-9a-fA-F]){6}|#([0-9a-fA-F]){3}))/,/^(?:#([_a-zA-Z0-9-]|([^\0-\177])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))*)/,/^(?:(([_a-zA-Z-]|([^\0-\177])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))([_a-zA-Z0-9-]|([^\0-\177])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))*)\(((( )|\t)*))/,/^(?:only\b)/,/^(?:not\b)/,/^(?:and\b)/,/^(?:from\b)/,/^(?:to\b)/,/^(?:((odd\b)|(even\b)|(-|\+)?([0-9]+)?(n\b)((( )|\t)+)*(-|\+)((( )|\t)+)*([0-9]+)|(-|\+)?([0-9]+)?(n\b)))/,/^(?:(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))*')))/,/^(?:([+-]?([0-9]*\.[0-9]+)(e[+-]?[0-9]+)?|[+-]?([0-9]+)(e[+-]?[0-9]+)?)%)/,/^(?:([+-]?([0-9]*\.[0-9]+)(e[+-]?[0-9]+)?|[+-]?([0-9]+)(e[+-]?[0-9]+)?)(([_a-zA-Z-]|([^\0-\177])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))([_a-zA-Z0-9-]|([^\0-\177])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))*))/,/^(?:([+-]?([0-9]*\.[0-9]+)(e[+-]?[0-9]+)?|[+-]?([0-9]+)(e[+-]?[0-9]+)?))/,/^(?:((([uU]\+([0-9a-fA-F]){1}\?{1,5})|([uU]\+([0-9a-fA-F]){2}\?{1,4})|([uU]\+([0-9a-fA-F]){3}\?{1,3})|([uU]\+([0-9a-fA-F]){4}\?{1,2})|([uU]\+([0-9a-fA-F]){5}\?{1}))|[uU]\+([0-9a-fA-F]){1,6}-([0-9a-fA-F]){1,6}|[uU]\+([0-9a-fA-F]){1,6}))/,/^(?:(([_a-zA-Z-]|([^\0-\177])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))([_a-zA-Z0-9-]|([^\0-\177])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-fA-F]))*))/,/^(?:((( )|\t)*)\+((( )|\t)*))/,/^(?:((( )|\t)*)=((( )|\t)*))/,/^(?:((( )|\t)*)>((( )|\t)*))/,/^(?:((( )|\t)*)<((( )|\t)*))/,/^(?:((( )|\t)*)>=((( )|\t)*))/,/^(?:((( )|\t)*)<=((( )|\t)*))/,/^(?:((( )|\t)*)~=((( )|\t)*))/,/^(?:((( )|\t)*)\|=((( )|\t)*))/,/^(?:((( )|\t)*)\^=((( )|\t)*))/,/^(?:((( )|\t)*)\$=((( )|\t)*))/,/^(?:((( )|\t)*)\*=((( )|\t)*))/,/^(?:((( )|\t)*)\|\|((( )|\t)*))/,/^(?:&)/,/^(?:((( )|\t)*):)/,/^(?::)/,/^(?:((( )|\t)+))/,/^(?:[^;{()]*\))/,/^(?:[^;{()]*;)/,/^(?:[^;{()]*\{)/,/^(?:.)/,/^(?:((( )|\t)*);((( )|\t)*))/,/^(?:((( )|\t)*),((( )|\t)*))/,/^(?:((( )|\t)*)\[((( )|\t)*))/,/^(?:((( )|\t)*)\]((( )|\t)*))/,/^(?:\(((( )|\t)*))/,/^(?:((( )|\t)*)\))/,/^(?:((( )|\t)*)\{((( )|\t)*))/,/^(?:((( )|\t)*)\}((( )|\t)*))/,/^(?:((( )|\t)+))/,/^(?:.)/,/^(?:$)/],
conditions: {"STATE-COLONS":{"rules":[38,39,40,41,42,43],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}